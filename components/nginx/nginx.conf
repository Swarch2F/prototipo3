events {
    worker_connections 1024;
}

http {
    # Configuración básica
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Configuraciones de seguridad globales
    server_tokens off;                    # Ocultar versión de nginx
    client_max_body_size 10M;            # Límite de tamaño de request
    client_body_timeout 60s;             # Timeout del body
    client_header_timeout 60s;           # Timeout de headers
    keepalive_timeout 65s;               # Keepalive timeout
    
    # Rate limiting para seguridad
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;

    # Headers de seguridad globales
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss: http://localhost:9000;" always;

    # Upstream para API Gateway
    upstream api_gateway {
        server api-gateway:4000;
        keepalive 32;
    }

    # Upstream para Frontend
    upstream frontend {
        server gx_fe_gradex:3000;
        keepalive 32;
    }

    # Redirección HTTP -> HTTPS (Forzar HTTPS)
    server {
        listen 80;
        server_name localhost;
        
        # Redireccionar todo el tráfico HTTP a HTTPS
        return 301 https://$server_name$request_uri;
    }

    # Servidor principal HTTPS - Proxy Inverso con Seguridad SSL
    server {
        listen 443 ssl;
        http2 on;
        server_name localhost;

        # Configuración SSL
        ssl_certificate /etc/nginx/ssl/gradex.crt;
        ssl_certificate_key /etc/nginx/ssl/gradex.key;
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        # Configuración SSL moderna y segura
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;

        # Headers de seguridad HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https: http://localhost:9000;" always;

        # Bloquear IPs maliciosas (ejemplo básico)
        deny 192.168.1.100;  # Ejemplo de IP bloqueada
        # allow all;          # Permitir el resto

        # Health check del proxy
        location /nginx-health {
            access_log off;
            return 200 "Nginx Proxy OK\n";
            add_header Content-Type text/plain;
        }

        # API Gateway - Con rate limiting estricto
        location /graphql {
            # Rate limiting para API
            limit_req zone=api_limit burst=20 nodelay;
            
            # Headers de seguridad específicos para API
            add_header X-API-Gateway "GRADEX-v1" always;
            
            # Validaciones básicas
            if ($request_method !~ ^(GET|POST|OPTIONS)$ ) {
                return 405;
            }
            
            # Proxy al API Gateway
            proxy_pass http://api_gateway;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Frontend Next.js - Rate limiting moderado
        location / {
            # Rate limiting general
            limit_req zone=general_limit burst=50 nodelay;
            
            # Proxy al Frontend
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_cache_bypass $http_upgrade;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Bloquear acceso a archivos sensibles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ \.(sql|conf|config|bak|backup|swp|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Error pages personalizadas
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}