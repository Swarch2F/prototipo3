events {
    worker_connections 1024;
}

http {
    # Configuración básica
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Configuraciones de seguridad globales
    server_tokens off;
    client_max_body_size 10M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 65s;
    
    # Rate limiting para seguridad
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general_limit:10m rate=30r/s;

    # Headers de seguridad globales
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' ws: wss: http://localhost:9000;" always;

    # Upstream para API Gateway
    upstream api_gateway {
        server api-gateway:4000;
        keepalive 32;
    }

    # Upstream para Frontend (DNS Round Robin automático)
    upstream frontend {
        # Docker Compose automáticamente balancea entre todas las instancias del servicio
        server gx_fe_gradex:3000;
        keepalive 32;
    }

    # Resto de la configuración...
    # ... (copiar el resto del nginx.conf original)
}
