version: '3.8'

services:
  # =============== FRONTEND ===============
  gx_fe_gradex:
    build:
      context: ./components/component-3
      dockerfile: Dockerfile
    image: gx_fe_gradex:latest
    container_name: gx_fe_gradex
    ports:
      - "3001:3000"
    environment:
      - API_URL=http://api-gateway:9000
    depends_on:
      - api-gateway
    restart: always
    networks:
      - microservices-network

  # =============== API GATEWAY ===============
  api-gateway:
    build:
      context: ./components/api-gateway
      dockerfile: Dockerfile
    image: api-gateway:latest
    container_name: gx_api_gateway
    ports:
      - "9000:4000"
    environment:
      # URLs de los microservicios en la red de Docker
      GX_BE_PROASIG_URL: "http://component-2-1:8080/graphql"
      GX_BE_CALIF_URL: "http://component-2-2:8080/graphql"
      GX_SIA_URL: "http://component-1:8000/api"
      GX_AUTH_URL: "http://component-4:8082/api/v1"
      RABBITMQ_URL: "amqp://rabbitmq:5672"
      PORT: 4000
    depends_on:
      - component-1
      - component-2-1
      - component-2-2
      - component-4
      - rabbitmq
    restart: always
    networks:
      - microservices-network

  # =============== BROKER (DESHABILITADO - INTEGRADO EN API GATEWAY) ===============
  # gx_comun_async:
  #   build:
  #     context: ./components/broker
  #     dockerfile: Dockerfile
  #   image: gx_comun_async:latest
  #   container_name: gx_be_comun_async
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - PORT=3000
  #     - RABBITMQ_URL=amqp://rabbitmq:5672
  #     - PROASIG_SERVICE_URL=http://component-2-1:8080
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   restart: always
  #   networks:
  #     - microservices-network

  # =============== RABBITMQ ===============
  rabbitmq:
    image: rabbitmq:3-management
    container_name: gx_be_rabbitmq
    ports:
      - "5673:5672"
      - "15673:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: always
    networks:
      - microservices-network

  # =============== MICROSERVICIO SIA COLEGIOS (Component-1) ===============
  component-1:
    build:
      context: ./components/component-1
      dockerfile: Dockerfile
    image: component-1:latest
    container_name: gx_be_estcur
    ports:
      - "8083:8000"
    environment:
      - DB_HOST=sia-db
      - DB_NAME=sia_colegios
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
      - LOAD_INITIAL_DATA=true
    command: ["django"]
    depends_on:
      - sia-db
    restart: always
    networks:
      - microservices-network

  # Base de datos PostgreSQL para SIA Colegios
  sia-db:
    image: postgres:17-alpine
    container_name: gx_db_estcur
    environment:
      POSTGRES_DB: sia_colegios
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_ENCODING: UTF8
    ports:
      - "5433:5432"
    volumes:
      - sia_db_data:/var/lib/postgresql/data
      - ./components/component-1/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    restart: always
    networks:
      - microservices-network


  # =============== MICROSERVICIO DE AUTENTICACIÓN (Component-4) ===============
  component-4:
    build:
      context: ./components/component-4
      dockerfile: Dockerfile
    image: gx_be_auth:latest
    container_name: gx_be_auth
    ports:
      - "8082:8082"
    environment:
      - PORT=8082
      - JWT_SECRET="nbu8dTVEoJ/1pnIaOj+JM+Jrui/jLvtIKmXgGScb1ndzEfBb4GbqIz45gcMdRmb4ptfBNA1+/sCtttvpZPL8Vg"
      - JWT_EXPIRATION=3600 # 1 hora
      - GOOGLE_CLIENT_ID="97072811302-e0foheebjj6kto3k8efabljk2t453vbe.apps.googleusercontent.com"
      - GOOGLE_CLIENT_SECRET="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"
      - GOOGLE_REDIRECT_URL=http://localhost:3001/auth/callback
      - DB_HOST=gx_db_auth
      - DB_PORT=5432
      - DB_USER=authuser
      - DB_PASSWORD=authpass
      - DB_NAME=authdb
      - DB_SSL_MODE=disable
      - FrontendURL=http://localhost:3001
    depends_on:
      gx_db_auth:
        condition: service_healthy
    restart: always
    networks:
      - microservices-network

  # Base de datos PostgreSQL para autenticación
  gx_db_auth:
    image: postgres:16
    container_name: gx_db_auth
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: authuser
      POSTGRES_PASSWORD: authpass
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./components/component-4/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authuser -d authdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - microservices-network



  # =============== MICROSERVICIO PROFESORES Y ASIGNATURAS (Component-2-1) ===============
  component-2-1:
    build:
      context: ./components/component-2-1
      dockerfile: Dockerfile
    image: component-2-1:latest
    container_name: gx_be_proasig
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo-professors:27017/profesores_db
      SPRING_GRAPHQL_SCHEMA_LOCATION: classpath:/graphql/
    depends_on:
      - mongo-professors
    restart: always
    networks:
      - microservices-network

  # MongoDB para profesores y asignaturas
  mongo-professors:
    image: mongo:6.0
    container_name: gx_db_proasig
    ports:
      - "27018:27017"
    volumes:
      - mongo_professors_data:/data/db
    restart: always
    networks:
      - microservices-network

  # =============== MICROSERVICIO DE CALIFICACIONES (Component-2-2) ===============
  component-2-2:
    build:
      context: ./components/component-2-2
      dockerfile: Dockerfile
    image: component-2-2:latest
    container_name: gx_be_calif
    ports:
      - "8081:8080"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo-grades:27017/calificaciones_db
      SPRING_GRAPHQL_SCHEMA_LOCATION: classpath:/graphql/
    depends_on:
      - mongo-grades
    restart: always
    networks:
      - microservices-network

  # MongoDB para calificaciones
  mongo-grades:
    image: mongo:6.0
    container_name: gx_db_calif
    ports:
      - "27019:27017"
    volumes:
      - mongo_grades_data:/data/db
    restart: always
    networks:
      - microservices-network

# Volúmenes para persistencia de datos
volumes:
  auth_db_data:
  mongo_professors_data:
  mongo_grades_data:
  sia_db_data:
  rabbitmq_data:

# Red para comunicación entre microservicios
networks:
  microservices-network:
    driver: bridge